"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Switch } from "@/components/ui/switch"
import { CodeEditor } from "@/components/code-editor"
import { DownloadIcon, ShareIcon, CopyIcon, PackageIcon, CheckIcon, LinkIcon } from "lucide-react"

interface SavedComponent {
  id: string
  name: string
  description: string
  code: string
  category: string
  tags: string[]
  createdAt: string
  framework: string
  styling: string
}

interface ExportModalProps {
  isOpen: boolean
  onClose: () => void
  component: SavedComponent
  allComponents?: SavedComponent[]
}

export function ExportModal({ isOpen, onClose, component, allComponents = [] }: ExportModalProps) {
  const [exportFormat, setExportFormat] = useState<"jsx" | "tsx" | "package">("tsx")
  const [includeTypes, setIncludeTypes] = useState(true)
  const [includeComments, setIncludeComments] = useState(true)
  const [packageName, setPackageName] = useState("my-ui-components")
  const [shareUrl, setShareUrl] = useState("")
  const [copied, setCopied] = useState<string | null>(null)

  const generateShareUrl = () => {
    const componentData = btoa(JSON.stringify(component))
    const url = `${window.location.origin}/shared/${componentData}`
    setShareUrl(url)
    return url
  }

  const handleCopy = async (text: string, type: string) => {
    await navigator.clipboard.writeText(text)
    setCopied(type)
    setTimeout(() => setCopied(null), 2000)
  }

  const formatCodeForExport = (code: string, format: "jsx" | "tsx") => {
    let formattedCode = code

    if (!includeTypes && format === "jsx") {
      // Remove TypeScript types for JSX export
      formattedCode = formattedCode
        .replace(/: React\.FC<[^>]*>/g, "")
        .replace(/: [A-Z][a-zA-Z]*(\[\])?/g, "")
        .replace(/interface [^{]*{[^}]*}/g, "")
        .replace(/type [^=]*=[^;]*;/g, "")
    }

    if (includeComments) {
      const header = `/**
 * ${component.name}
 * ${component.description}
 * 
 * Generated by UI Components Generator
 * Created: ${new Date(component.createdAt).toLocaleDateString()}
 * Category: ${component.category}
 * Tags: ${component.tags.join(", ")}
 */

`
      formattedCode = header + formattedCode
    }

    return formattedCode
  }

  const downloadFile = (content: string, filename: string, type = "text/plain") => {
    const blob = new Blob([content], { type })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = filename
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const handleSingleExport = () => {
    const extension = exportFormat === "jsx" ? "jsx" : "tsx"
    const formattedCode = formatCodeForExport(component.code, exportFormat)
    const filename = `${component.name.toLowerCase().replace(/\s+/g, "-")}.${extension}`
    downloadFile(formattedCode, filename)
  }

  const handlePackageExport = () => {
    const packageJson = {
      name: packageName,
      version: "1.0.0",
      description: "UI Components generated by UI Components Generator",
      main: "index.js",
      scripts: {
        build: "tsc",
        dev: "tsc --watch",
      },
      dependencies: {
        react: "^18.0.0",
        "@types/react": "^18.0.0",
      },
      devDependencies: {
        typescript: "^5.0.0",
      },
    }

    const indexContent = allComponents
      .map(
        (comp) =>
          `export { default as ${comp.name.replace(/\s+/g, "")} } from './${comp.name.toLowerCase().replace(/\s+/g, "-")}'`,
      )
      .join("\n")

    const readmeContent = `# ${packageName}

Generated UI Components Library

## Components

${allComponents
  .map(
    (comp) => `### ${comp.name}
${comp.description}

**Category:** ${comp.category}
**Tags:** ${comp.tags.join(", ")}

\`\`\`tsx
import { ${comp.name.replace(/\s+/g, "")} } from '${packageName}'
\`\`\`
`,
  )
  .join("\n")}

## Installation

\`\`\`bash
npm install ${packageName}
\`\`\`

Generated by UI Components Generator
`

    // Create a zip-like structure (simplified for demo)
    const packageContent = `// package.json
${JSON.stringify(packageJson, null, 2)}

// index.ts
${indexContent}

// README.md
${readmeContent}

${allComponents
  .map((comp) => {
    const formattedCode = formatCodeForExport(comp.code, "tsx")
    return `// ${comp.name.toLowerCase().replace(/\s+/g, "-")}.tsx
${formattedCode}`
  })
  .join("\n\n")}
`

    downloadFile(packageContent, `${packageName}.txt`, "text/plain")
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-hidden">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <ShareIcon className="w-5 h-5" />
            Export & Share: {component.name}
          </DialogTitle>
        </DialogHeader>

        <Tabs defaultValue="export" className="flex-1 overflow-hidden">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="export">Export</TabsTrigger>
            <TabsTrigger value="share">Share</TabsTrigger>
          </TabsList>

          <TabsContent value="export" className="space-y-4 overflow-auto">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div>
                  <Label className="text-base font-medium">Export Format</Label>
                  <div className="flex gap-2 mt-2">
                    <Button
                      variant={exportFormat === "jsx" ? "default" : "outline"}
                      size="sm"
                      onClick={() => setExportFormat("jsx")}
                    >
                      JSX
                    </Button>
                    <Button
                      variant={exportFormat === "tsx" ? "default" : "outline"}
                      size="sm"
                      onClick={() => setExportFormat("tsx")}
                    >
                      TSX
                    </Button>
                    <Button
                      variant={exportFormat === "package" ? "default" : "outline"}
                      size="sm"
                      onClick={() => setExportFormat("package")}
                    >
                      Package
                    </Button>
                  </div>
                </div>

                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="include-types">Include TypeScript Types</Label>
                    <Switch
                      id="include-types"
                      checked={includeTypes}
                      onCheckedChange={setIncludeTypes}
                      disabled={exportFormat === "tsx"}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <Label htmlFor="include-comments">Include Header Comments</Label>
                    <Switch id="include-comments" checked={includeComments} onCheckedChange={setIncludeComments} />
                  </div>
                </div>

                {exportFormat === "package" && (
                  <div>
                    <Label htmlFor="package-name">Package Name</Label>
                    <Input
                      id="package-name"
                      value={packageName}
                      onChange={(e) => setPackageName(e.target.value)}
                      placeholder="my-ui-components"
                      className="mt-1"
                    />
                  </div>
                )}

                <div className="flex gap-2">
                  {exportFormat === "package" ? (
                    <Button onClick={handlePackageExport} className="flex-1">
                      <PackageIcon className="w-4 h-4 mr-2" />
                      Export Package ({allComponents.length} components)
                    </Button>
                  ) : (
                    <Button onClick={handleSingleExport} className="flex-1">
                      <DownloadIcon className="w-4 h-4 mr-2" />
                      Download {exportFormat.toUpperCase()}
                    </Button>
                  )}

                  <Button
                    variant="outline"
                    onClick={() => handleCopy(formatCodeForExport(component.code, exportFormat), "code")}
                  >
                    {copied === "code" ? <CheckIcon className="w-4 h-4" /> : <CopyIcon className="w-4 h-4" />}
                  </Button>
                </div>
              </div>

              <div>
                <Label className="text-base font-medium">Preview</Label>
                <div className="mt-2 max-h-[400px] overflow-auto border rounded-lg">
                  <CodeEditor
                    code={formatCodeForExport(component.code, exportFormat)}
                    language={exportFormat === "jsx" ? "javascript" : "typescript"}
                  />
                </div>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="share" className="space-y-4">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div>
                  <Label className="text-base font-medium">Share Component</Label>
                  <p className="text-sm text-muted-foreground mt-1">
                    Generate a shareable link that others can use to view and copy your component.
                  </p>
                </div>

                <Button onClick={generateShareUrl} className="w-full">
                  <LinkIcon className="w-4 h-4 mr-2" />
                  Generate Share Link
                </Button>

                {shareUrl && (
                  <div className="space-y-2">
                    <Label>Shareable URL</Label>
                    <div className="flex gap-2">
                      <Input value={shareUrl} readOnly className="flex-1" />
                      <Button variant="outline" onClick={() => handleCopy(shareUrl, "url")}>
                        {copied === "url" ? <CheckIcon className="w-4 h-4" /> : <CopyIcon className="w-4 h-4" />}
                      </Button>
                    </div>
                  </div>
                )}

                <div className="p-4 bg-muted rounded-lg">
                  <h4 className="font-medium mb-2">Component Details</h4>
                  <div className="space-y-1 text-sm">
                    <p>
                      <strong>Name:</strong> {component.name}
                    </p>
                    <p>
                      <strong>Category:</strong> {component.category}
                    </p>
                    <p>
                      <strong>Tags:</strong> {component.tags.join(", ")}
                    </p>
                    <p>
                      <strong>Created:</strong> {new Date(component.createdAt).toLocaleDateString()}
                    </p>
                  </div>
                </div>
              </div>

              <div>
                <Label className="text-base font-medium">Embed Code</Label>
                <p className="text-sm text-muted-foreground mt-1 mb-2">
                  Use this code to embed the component in documentation or blogs.
                </p>
                <Textarea
                  value={`<iframe src="${shareUrl}" width="100%" height="400" frameborder="0"></iframe>`}
                  readOnly
                  className="font-mono text-xs"
                  rows={3}
                />
                <Button
                  variant="outline"
                  size="sm"
                  className="mt-2 bg-transparent"
                  onClick={() =>
                    handleCopy(`<iframe src="${shareUrl}" width="100%" height="400" frameborder="0"></iframe>`, "embed")
                  }
                >
                  {copied === "embed" ? <CheckIcon className="w-4 h-4 mr-2" /> : <CopyIcon className="w-4 h-4 mr-2" />}
                  Copy Embed Code
                </Button>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  )
}
